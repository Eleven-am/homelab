apiVersion: apps/v1
kind: Deployment
metadata:
  name: plunk-deployment
  namespace: plunk
  labels:
    app: plunk-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: plunk-deployment
  template:
    metadata:
      name: plunk-deployment
      labels:
        app: plunk-deployment
    spec:
      initContainers:
        - name: init-db
          image: postgres:14
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: plunk-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plunk-secrets
                  key: POSTGRES_PASSWORD
            - name: DB_NAME
              value: plunk
            - name: POSTGRES_HOST
              value: postgres-service.postgres.svc.cluster.local
          command: [ 'sh', '-c', 'PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d postgres -c "SELECT 1 FROM pg_database WHERE datname = ''$DB_NAME''" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d postgres -c "CREATE DATABASE $DB_NAME;"' ]
      containers:
        - name: plunk-deployment
          image: "driaug/plunk"
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "-c" ]
          env:
            - name: POSTGRES_HOST
              value: postgres-service.postgres.svc.cluster.local
          envFrom:
            - configMapRef:
                name: plunk-config
            - secretRef:
                name: plunk-secrets
          args:
            - |
              export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
              /app/entry.sh
          ports:
            - containerPort: 3000
              protocol: TCP
      restartPolicy: Always

