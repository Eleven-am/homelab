apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-server
  namespace: authentik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentik-server
  template:
    metadata:
      labels:
        app: authentik-server
    spec:
      initContainers:
        - name: init-db
          image: postgres:14
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: authentik-config
                  key: AUTHENTIK_POSTGRESQL__USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-secret
                  key: AUTHENTIK_POSTGRESQL__PASSWORD
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: authentik-config
                  key: AUTHENTIK_POSTGRESQL__NAME
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: authentik-config
                  key: AUTHENTIK_POSTGRESQL__HOST
          command: [ 'sh', '-c', 'PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d postgres -c "SELECT 1 FROM pg_database WHERE datname = ''$DB_NAME''" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d postgres -c "CREATE DATABASE $DB_NAME;"' ]
        - name: volume-permissions
          image: busybox:1.36
          command: [ "sh", "-c", "chown 1000:1000 /media" ]
          volumeMounts:
            - name: media
              mountPath: /media
      containers:
        - name: server
          image: ghcr.io/goauthentik/server:2024.8.0
          args: ["server"]
          ports:
            - containerPort: 9000
            - containerPort: 9443
          envFrom:
            - configMapRef:
                name: authentik-config
            - secretRef:
                name: authentik-secret
          volumeMounts:
            - name: media
              mountPath: /media
            - name: custom-templates
              mountPath: /templates
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: authentik-media-pvc
        - name: custom-templates
          persistentVolumeClaim:
            claimName: authentik-templates-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-worker
  namespace: authentik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentik-worker
  template:
    metadata:
      labels:
        app: authentik-worker
    spec:
      containers:
        - name: worker
          image: ghcr.io/goauthentik/server:2024.8.0
          args: ["worker"]
          envFrom:
            - configMapRef:
                name: authentik-config
            - secretRef:
                name: authentik-secret
          volumeMounts:
            - name: media
              mountPath: /media
            - name: certs
              mountPath: /certs
            - name: custom-templates
              mountPath: /templates
            - name: docker-socket
              mountPath: /var/run/docker.sock
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: authentik-media-pvc
        - name: certs
          persistentVolumeClaim:
            claimName: authentik-certs-pvc
        - name: custom-templates
          persistentVolumeClaim:
            claimName: authentik-templates-pvc
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
            type: Socket
